<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>FITBOY Admin - Coupon Management</title>
  <link rel="stylesheet" href="/css/style.css"/>
  <!-- Add SweetAlert2 CDN -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
  <div class="admin-container">
    <%- include('partials/sidebar', {page: 'coupon-management'}) %>

    <div class="main-content">
      <%- include('partials/header') %>

      <div class="dashboard-content">
        <div class="page-header">
          <h1 class="page-title">Coupon Management</h1>
          <button class="add-button" onclick="openAddCouponModal()">Create New Coupon</button>
        </div>

        <div class="filter-bar">
          <div class="search-box">
            <input type="text" placeholder="Search coupons...">
            <button class="search-button">Search</button>
          </div>
          <div class="filter-options">
            <select>
              <option value="">All Types</option>
              <option value="percentage">Percentage</option>
            </select>
            <select>
              <option value="">All Status</option>
              <option value="active">Active</option>
              <option value="expired">Expired</option>
              <option value="scheduled">Scheduled</option>
            </select>
          </div>
        </div>

        <div class="data-container">
          <table class="data-table">
            <thead>
              <tr>
                <th>Code</th>
                <th>Value</th>
                <th>Min Purchase</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% coupons.forEach(coupon => { %>
                <tr>
                  <td><%= coupon.coupencode %></td>
                  <td><%= coupon.couponpercent %>%</td>
                  <td>â‚¹<%= coupon.minimumAmount %></td>
                  <td><%= coupon.startingDate.toDateString() %></td>
                  <td><%= coupon.expiryDate.toDateString() %></td>
                  <td>
                    <% 
                      const now = new Date();
                      const status = coupon.expiryDate < now ? 'Expired' : 
                                    coupon.startingDate > now ? 'Scheduled' : 
                                    coupon.isActive ? 'Active' : 'Inactive';
                    %>
                    <span class="status-badge status-<%= status.toLowerCase() %>"><%= status %></span>
                  </td>
                  <td class="actions">
                    <button class="action-button edit" onclick='openEditCouponModal(<%- JSON.stringify(coupon) %>)'>Edit</button>
                    <button class="action-button delete" onclick="deleteCoupon('<%= coupon._id %>')">Delete</button>
                  </td>
                </tr>
              <% }) %>
            </tbody>
          </table>
        </div>

        <div style="margin-bottom: 70px;">
        <%- include('partials/pagination', {currentPage: 1, totalPages: 2}) %>
        </div>
        </div>
      <%- include('partials/footer') %>
    </div>
  </div>

  <!-- Add Coupon Modal -->
  <div id="addCouponModal" class="modal hidden">
    <div class="modal-content">
      <h2>Add Coupon</h2>
      <form id="addCouponForm" action="/admin/add-coupon" method="POST">
        <div class="form-group">
          <label for="addCoupencode">Coupon Code *</label>
          <input type="text" id="addCoupencode" name="coupencode" required>
          <% if (errors?.coupencode) { %><p class="error"><%= errors.coupencode %></p><% } %>
        </div>
        
        <div class="form-group">
          <label for="addCouponpercent">Discount Percentage *</label>
          <input type="number" id="addCouponpercent" name="couponpercent" min="1" max="100" required>
          <% if (errors?.couponpercent) { %><p class="error"><%= errors.couponpercent %></p><% } %>
        </div>
        
        <div class="form-group">
          <label for="addMinimumAmount">Minimum Purchase Amount *</label>
          <input type="number" id="addMinimumAmount" name="minimumAmount" min="1" required>
          <% if (errors?.minimumAmount) { %><p class="error"><%= errors.minimumAmount %></p><% } %>
        </div>
        
        <div class="form-group">
          <label for="addStartingDate">Start Date *</label>
          <input type="date" id="addStartingDate" name="startingDate" required>
          <% if (errors?.startingDate) { %><p class="error"><%= errors.startingDate %></p><% } %>
        </div>
        
        <div class="form-group">
          <label for="addExpiryDate">Expiry Date *</label>
          <input type="date" id="addExpiryDate" name="expiryDate" required>
          <% if (errors?.expiryDate) { %><p class="error"><%= errors.expiryDate %></p><% } %>
        </div>
        
        <div class="form-group">
          <label for="addDescription">Description</label>
          <textarea id="addDescription" name="description"></textarea>
          <% if (errors?.description) { %><p class="error"><%= errors.description %></p><% } %>
        </div>
        
        <div class="form-buttons">
          <button type="submit">Create</button>
          <button type="button" onclick="closeAddCouponModal()">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Edit Coupon Modal -->
  <div id="editCouponModal" class="modal hidden">
    <div class="modal-content">
      <h2>Edit Coupon</h2>
      <form id="editCouponForm" method="POST" action="/admin/edit-coupon">
        <input type="hidden" name="id">
        
        <div class="form-group">
          <label for="editCoupencode">Coupon Code *</label>
          <input type="text" id="editCoupencode" name="coupencode" required>
          <p class="error hidden" id="editCoupencodeError">Coupon Code is required</p>
        </div>
        
        <div class="form-group">
          <label for="editCouponpercent">Discount Percentage *</label>
          <input type="number" id="editCouponpercent" name="couponpercent" min="1" max="100" required>
          <p class="error hidden" id="editCouponpercentError">Discount % must be between 1 and 100</p>
        </div>
        
        <div class="form-group">
          <label for="editMinimumAmount">Minimum Purchase Amount *</label>
          <input type="number" id="editMinimumAmount" name="minimumAmount" min="1" required>
          <p class="error hidden" id="editMinimumAmountError">Minimum Purchase must be greater than zero</p>
        </div>
        
        <div class="form-group">
          <label for="editStartingDate">Start Date *</label>
          <input type="date" id="editStartingDate" name="startingDate" required>
        </div>
        
        <div class="form-group">
          <label for="editExpiryDate">Expiry Date *</label>
          <input type="date" id="editExpiryDate" name="expiryDate" required>
          <p class="error hidden" id="editDateError">Start date must be before expiry date</p>
        </div>
        
        <div class="form-group">
          <label for="editDescription">Description</label>
          <textarea id="editDescription" name="description"></textarea>
        </div>
        
        <div class="form-buttons">
          <button type="submit">Update</button>
          <button type="button" onclick="closeEditCouponModal()">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    function openAddCouponModal() {
      document.getElementById('addCouponModal').classList.remove('hidden');
      resetAddForm(); // Reset form when opening
    }

    function closeAddCouponModal() {
      document.getElementById('addCouponModal').classList.add('hidden');
      resetAddForm(); // Reset form when closing
    }

    function resetAddForm() {
      const form = document.getElementById('addCouponForm');
      form.reset();
      // Clear any existing error messages
      const errors = form.querySelectorAll('.error');
      errors.forEach(err => err.remove());
    }

    function openEditCouponModal(coupon) {
      const form = document.getElementById('editCouponForm');
      form.id.value = coupon._id;
      form.coupencode.value = coupon.coupencode;
      form.couponpercent.value = coupon.couponpercent;
      form.minimumAmount.value = coupon.minimumAmount;
      form.startingDate.value = new Date(coupon.startingDate).toISOString().slice(0, 10);
      form.expiryDate.value = new Date(coupon.expiryDate).toISOString().slice(0, 10);
      form.description.value = coupon.description || '';
      document.getElementById('editCouponModal').classList.remove('hidden');
    }

    function closeEditCouponModal() {
      document.getElementById('editCouponModal').classList.add('hidden');
    }

    // Client-side validation and submission for Add Coupon Form
    document.getElementById('addCouponForm').addEventListener('submit', async function (e) {
      e.preventDefault();
      const errors = this.querySelectorAll('.error');
      errors.forEach(err => err.remove());

      let hasError = false;

      if (!this.coupencode.value.trim()) {
        const error = document.createElement('p');
        error.className = 'error';
        error.textContent = 'Coupon Code is required';
        this.coupencode.after(error);
        hasError = true;
      }

      const discount = Number(this.couponpercent.value);
      if (isNaN(discount) || discount < 1 || discount > 100) {
        const error = document.createElement('p');
        error.className = 'error';
        error.textContent = 'Discount % must be between 1 and 100';
        this.couponpercent.after(error);
        hasError = true;
      }

      const minAmount = Number(this.minimumAmount.value);
      if (isNaN(minAmount) || minAmount <= 0) {
        const error = document.createElement('p');
        error.className = 'error';
        error.textContent = 'Minimum Purchase must be greater than zero';
        this.minimumAmount.after(error);
        hasError = true;
      }

      const startDate = new Date(this.startingDate.value);
      const expiryDate = new Date(this.expiryDate.value);
      if (isNaN(startDate) || isNaN(expiryDate) || startDate >= expiryDate) {
        const error = document.createElement('p');
        error.className = 'error';
        error.textContent = 'Start date must be before expiry date';
        this.expiryDate.after(error);
        hasError = true;
      }

      const formData = new URLSearchParams();
      formData.append('coupencode', this.coupencode.value);
      formData.append('couponpercent', this.couponpercent.value);
      formData.append('minimumAmount', this.minimumAmount.value);
      formData.append('startingDate', this.startingDate.value);
      formData.append('expiryDate', this.expiryDate.value);
      formData.append('description', this.description.value);
      console.log('Add Coupon URLSearchParams:', formData.toString());

      if (!hasError) {
        try {
          const response = await fetch(this.action, {
            method: 'POST',
            body: formData,
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'Accept': 'application/json',
            },
          });
          console.log('Add Coupon Response Status:', response.status);
          const result = await response.json();
          console.log('Add Coupon Response Data:', result);

          if (response.ok) {
            Swal.fire({
              icon: 'success',
              title: 'Success',
              text: 'Coupon added successfully!',
              confirmButtonColor: '#007bff',
            }).then(() => {
              resetAddForm(); // Reset form after successful creation
              closeAddCouponModal();
              window.location.reload();
            });
          } else {
            // Check if it's a duplicate coupon error
            if (result.message && result.message.toLowerCase().includes('already exists') || 
                result.message && result.message.toLowerCase().includes('duplicate')) {
              Swal.fire({
                icon: 'warning',
                title: 'Coupon Already Exists',
                text: 'A coupon with this code already exists. Please use a different coupon code.',
                confirmButtonColor: '#007bff',
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message || 'Failed to add coupon.',
                confirmButtonColor: '#007bff',
              });
            }
          }
        } catch (error) {
          console.error('Add Coupon Fetch Error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while adding the coupon.',
            confirmButtonColor: '#007bff',
          });
        }
      }
    });

    // Client-side validation and submission for Edit Coupon Form
    document.getElementById('editCouponForm').addEventListener('submit', async function (e) {
      e.preventDefault();
      const errorElements = this.querySelectorAll('.error');
      errorElements.forEach(err => err.classList.add('hidden'));

      let hasError = false;

      if (!this.coupencode.value.trim()) {
        document.getElementById('editCoupencodeError').classList.remove('hidden');
        hasError = true;
      }

      const discount = Number(this.couponpercent.value);
      if (isNaN(discount) || discount < 1 || discount > 100) {
        document.getElementById('editCouponpercentError').classList.remove('hidden');
        hasError = true;
      }

      const minAmount = Number(this.minimumAmount.value);
      if (isNaN(minAmount) || minAmount <= 0) {
        document.getElementById('editMinimumAmountError').classList.remove('hidden');
        hasError = true;
      }

      const startDate = new Date(this.startingDate.value);
      const expiryDate = new Date(this.expiryDate.value);
      if (isNaN(startDate) || isNaN(expiryDate) || startDate >= expiryDate) {
        document.getElementById('editDateError').classList.remove('hidden');
        hasError = true;
      }

      const formData = new URLSearchParams();
      formData.append('id', this.id.value);
      formData.append('coupencode', this.coupencode.value);
      formData.append('couponpercent', this.couponpercent.value);
      formData.append('minimumAmount', this.minimumAmount.value);
      formData.append('startingDate', this.startingDate.value);
      formData.append('expiryDate', this.expiryDate.value);
      formData.append('description', this.description.value);
      console.log('Edit Coupon URLSearchParams:', formData.toString());

      if (!hasError) {
        try {
          const response = await fetch(this.action, {
            method: 'POST',
            body: formData,
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'Accept': 'application/json',
            },
          });
          console.log('Edit Coupon Response Status:', response.status);
          const result = await response.json();
          console.log('Edit Coupon Response Data:', result);

          if (response.ok) {
            Swal.fire({
              icon: 'success',
              title: 'Success',
              text: 'Coupon updated successfully!',
              confirmButtonColor: '#007bff',
            }).then(() => {
              window.location.reload();
            });
          } else {
            // Check if it's a duplicate coupon error
            if (result.message && result.message.toLowerCase().includes('already exists') || 
                result.message && result.message.toLowerCase().includes('duplicate')) {
              Swal.fire({
                icon: 'warning',
                title: 'Coupon Already Exists',
                text: 'A coupon with this code already exists. Please use a different coupon code.',
                confirmButtonColor: '#007bff',
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message || 'Failed to update coupon.',
                confirmButtonColor: '#007bff',
              });
            }
          }
        } catch (error) {
          console.error('Edit Coupon Fetch Error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while updating the coupon.',
            confirmButtonColor: '#007bff',
          });
        }
      }
    });

    // Delete Coupon Function
    async function deleteCoupon(id) {
      Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#007bff',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!',
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            const response = await fetch('/admin/delete-coupon', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
              },
              body: JSON.stringify({ id }),
            });
            console.log('Delete Coupon Response Status:', response.status);
            const result = await response.json();
            console.log('Delete Coupon Response Data:', result);

            if (response.ok) {
              Swal.fire({
                icon: 'success',
                title: 'Deleted!',
                text: 'Coupon has been deleted.',
                confirmButtonColor: '#007bff',
              }).then(() => {
                window.location.reload();
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message || 'Failed to delete coupon.',
                confirmButtonColor: '#007bff',
              });
            }
          } catch (error) {
            console.error('Delete Coupon Fetch Error:', error);
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'An error occurred while deleting the coupon.',
              confirmButtonColor: '#007bff',
            });
          }
        }
      });
    }
  </script>

  <style>
    .modal.hidden { display: none; }
    .modal {
      position: fixed; top: 0; left: 0; width: 100%; height: 100%;
      background: rgba(0,0,0,0.5); display: flex;
      align-items: center; justify-content: center;
      z-index: 1000;
    }
    .modal-content {
      background: #ffffff; padding: 2rem; border-radius: 12px; width: 450px;
      display: flex; flex-direction: column; gap: 1rem;
      box-shadow: 0 4px 20px rgba(0,0,0,0.2);
      max-height: 80vh; overflow-y: auto;
    }
    .modal-content h2 {
      margin: 0 0 1rem; font-size: 1.5rem; color: #333;
      border-bottom: 1px solid #eee; padding-bottom: 0.5rem;
    }
    
    .form-group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .form-group label {
      font-weight: 600;
      color: #333;
      font-size: 0.9rem;
    }
    
    .modal-content form input,
    .modal-content form textarea {
      width: 100%; padding: 0.75rem; border: 1px solid #ddd;
      border-radius: 6px; font-size: 1rem; transition: border-color 0.3s;
      box-sizing: border-box;
    }
    .modal-content form input:focus,
    .modal-content form textarea:focus {
      border-color: #007bff; outline: none;
    }
    .modal-content form textarea {
      resize: vertical; min-height: 80px;
    }
    
    .form-buttons {
      display: flex;
      gap: 1rem;
      margin-top: 1rem;
    }
    
    .modal-content button {
      padding: 0.75rem 1.5rem; border: none; border-radius: 6px;
      font-size: 1rem; cursor: pointer; transition: background-color 0.3s;
      flex: 1;
    }
    .modal-content button[type="submit"] {
      background: #007bff; color: #fff;
    }
    .modal-content button[type="submit"]:hover {
      background: #0056b3;
    }
    .modal-content button[type="button"] {
      background: #f1f1f1; color: #333;
    }
    .modal-content button[type="button"]:hover {
      background: #e0e0e0;
    }
    .error {
      color: #d32f2f; font-size: 0.875rem; margin: 0.25rem 0 0;
    }
    .error.hidden {
      display: none;
    }
  </style>
</body>
</html>