<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChatApp - Connect & Communicate</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<style>
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    height: 100vh;
    overflow: hidden;
}

.app-container {
    display: flex;
    height: 100vh;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    margin: 10px;
    overflow: hidden;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
}

/* Sidebar Styles */
.sidebar {
    width: 70px;
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(20px);
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px 0;
    border-radius: 20px 0 0 20px;
}

.logo {
    font-size: 24px;
    color: white;
    margin-bottom: 30px;
}

.nav-menu {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.nav-item {
    width: 50px;
    height: 50px;
    border: none;
    background: transparent;
    color: rgba(255, 255, 255, 0.7);
    border-radius: 15px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 18px;
}

.nav-item:hover,
.nav-item.active {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    transform: translateY(-2px);
}

/* Chat List Panel */
.chat-list-panel {
    width: 350px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    display: flex;
    flex-direction: column;
    border-radius: 0;
}

.panel-header {
    padding: 25px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.panel-header h2 {
    color: #333;
    font-size: 24px;
    font-weight: 600;
}

.create-btn {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 14px;
    transition: transform 0.2s ease;
}

.create-btn:hover {
    transform: translateY(-1px);
}

.search-container {
    padding: 20px 25px;
    position: relative;
}

.search-input {
    width: 100%;
    padding: 12px 40px 12px 15px;
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 12px;
    background: rgba(255, 255, 255, 0.8);
    font-size: 14px;
    outline: none;
    transition: all 0.3s ease;
}

.search-input:focus {
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.search-icon {
    position: absolute;
    right: 35px;
    top: 50%;
    transform: translateY(-50%);
    color: #999;
}

/* Chat List */
.chat-list {
    flex: 1;
    overflow-y: auto;
    padding: 0 10px;
}

.chat-item {
    display: flex;
    align-items: center;
    padding: 15px;
    cursor: pointer;
    border-radius: 12px;
    margin: 5px 0;
    transition: all 0.2s ease;
    position: relative;
}

.chat-item:hover {
    background: rgba(102, 126, 234, 0.1);
}

.chat-item.active {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
}

.chat-item.active .chat-preview,
.chat-item.active .chat-time {
    color: rgba(255, 255, 255, 0.8);
}

.chat-avatar {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    margin-right: 15px;
    object-fit: cover;
}

.chat-info {
    flex: 1;
}

.chat-name {
    font-weight: 600;
    font-size: 16px;
    margin-bottom: 4px;
    color: #333;
}

.chat-preview {
    font-size: 14px;
    color: #666;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.chat-meta {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 5px;
}

.chat-time {
    font-size: 12px;
    color: #999;
}

.unread-badge {
    background: #ff4757;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: 600;
}

.online-indicator {
    position: absolute;
    bottom: 2px;
    right: 2px;
    width: 12px;
    height: 12px;
    background: #2ed573;
    border: 2px solid white;
    border-radius: 50%;
}

/* Community List */
.community-list {
    flex: 1;
    overflow-y: auto;
    padding: 0 10px;
}

.community-item {
    display: flex;
    align-items: center;
    padding: 15px;
    cursor: pointer;
    border-radius: 12px;
    margin: 5px 0;
    transition: all 0.2s ease;
}

.community-item:hover {
    background: rgba(102, 126, 234, 0.1);
}

.community-avatar {
    width: 45px;
    height: 45px;
    border-radius: 12px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 18px;
    margin-right: 15px;
}

.community-info h4 {
    font-weight: 600;
    font-size: 16px;
    margin-bottom: 4px;
    color: #333;
}

.community-info p {
    font-size: 14px;
    color: #666;
}

/* Profile Section */
.profile-section {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
}

.profile-card {
    text-align: center;
    padding: 20px;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 15px;
    margin-bottom: 20px;
}

.profile-avatar {
    position: relative;
    display: inline-block;
    margin-bottom: 15px;
}

.profile-avatar img {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    object-fit: cover;
}

.username-container {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    margin-bottom: 5px;
}

.username-container h3 {
    color: #333;
    font-size: 20px;
    font-weight: 600;
}

.edit-btn {
    background: none;
    border: none;
    color: #667eea;
    cursor: pointer;
    font-size: 14px;
    padding: 5px;
    border-radius: 5px;
    transition: background 0.2s ease;
}

.edit-btn:hover {
    background: rgba(102, 126, 234, 0.1);
}

.username-input {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 16px;
    text-align: center;
    margin-bottom: 10px;
}

.user-status {
    color: #2ed573;
    font-size: 14px;
    font-weight: 500;
}

.profile-stats {
    display: flex;
    justify-content: space-around;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 15px;
    padding: 20px;
}

.stat {
    text-align: center;
}

.stat-number {
    display: block;
    font-size: 24px;
    font-weight: 700;
    color: #333;
    margin-bottom: 5px;
}

.stat-label {
    font-size: 14px;
    color: #666;
}

/* Main Chat Area */
.chat-area {
    flex: 1;
    display: flex;
    flex-direction: column;
    background: rgba(255, 255, 255, 0.98);
    backdrop-filter: blur(20px);
}

.chat-header {
    padding: 20px 25px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: rgba(255, 255, 255, 0.95);
}

.chat-user-info {
    display: flex;
    align-items: center;
    gap: 15px;
}

.chat-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
}

.chat-user-details h3 {
    color: #333;
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 2px;
}

.chat-user-details p {
    color: #2ed573;
    font-size: 14px;
}

.chat-actions {
    display: flex;
    gap: 10px;
}

.action-btn {
    width: 40px;
    height: 40px;
    border: none;
    background: rgba(102, 126, 234, 0.1);
    color: #667eea;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.action-btn:hover {
    background: #667eea;
    color: white;
}

/* Chat Messages */
.chat-messages {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
    background: linear-gradient(to bottom, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.98));
}

.welcome-message {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    text-align: center;
    color: #666;
}

.welcome-message i {
    font-size: 48px;
    margin-bottom: 20px;
    color: #667eea;
}

.welcome-message h3 {
    font-size: 24px;
    margin-bottom: 10px;
    color: #333;
}

.message {
    display: flex;
    margin-bottom: 15px;
    align-items: flex-end;
}

.message.sent {
    justify-content: flex-end;
}

.message-content {
    max-width: 70%;
    padding: 12px 16px;
    border-radius: 18px;
    position: relative;
}

.message.received .message-content {
    background: rgba(102, 126, 234, 0.1);
    color: #333;
    border-bottom-left-radius: 4px;
}

.message.sent .message-content {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border-bottom-right-radius: 4px;
}

.message-time {
    font-size: 11px;
    opacity: 0.7;
    margin-top: 5px;
}

.message-avatar {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    margin: 0 10px;
    object-fit: cover;
}

/* Chat Input */
.chat-input-container {
    padding: 20px 25px;
    background: rgba(255, 255, 255, 0.95);
    border-top: 1px solid rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 15px;
}

.attachment-btn,
.emoji-btn {
    width: 40px;
    height: 40px;
    border: none;
    background: rgba(102, 126, 234, 0.1);
    color: #667eea;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.attachment-btn:hover,
.emoji-btn:hover {
    background: rgba(102, 126, 234, 0.2);
}

.message-input {
    flex: 1;
    padding: 12px 16px;
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 20px;
    background: rgba(255, 255, 255, 0.8);
    font-size: 14px;
    outline: none;
    transition: all 0.3s ease;
}

.message-input:focus {
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.send-btn {
    width: 40px;
    height: 40px;
    border: none;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s ease;
}

.send-btn:hover {
    transform: scale(1.05);
}

/* Right Info Panel */
.info-panel {
    width: 300px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border-radius: 0 20px 20px 0;
    display: flex;
    flex-direction: column;
}

.info-header {
    padding: 25px;
    text-align: center;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

.info-avatar {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    margin-bottom: 15px;
    object-fit: cover;
}

.info-user-details h3 {
    color: #333;
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 5px;
}

.info-user-details p {
    color: #666;
    font-size: 14px;
}

.info-sections {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
}

.info-section {
    margin-bottom: 20px;
}

.section-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 12px 15px;
    background: rgba(102, 126, 234, 0.1);
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.section-header:hover {
    background: rgba(102, 126, 234, 0.15);
}

.section-header i:first-child {
    color: #667eea;
    margin-right: 10px;
}

.section-header span {
    flex: 1;
    font-weight: 500;
    color: #333;
}

.file-list {
    margin-top: 10px;
}

.file-item {
    display: flex;
    align-items: center;
    padding: 10px 15px;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 8px;
    margin-bottom: 8px;
    transition: all 0.2s ease;
}

.file-item:hover {
    background: rgba(102, 126, 234, 0.1);
}

.file-item i:first-child {
    color: #ff4757;
    margin-right: 10px;
    font-size: 16px;
}

.file-item span {
    flex: 1;
    font-size: 14px;
    color: #333;
}

.file-item i:last-child {
    color: #667eea;
    cursor: pointer;
    transition: color 0.2s ease;
}

.file-item i:last-child:hover {
    color: #764ba2;
}

/* Mobile Menu Toggle */
.mobile-menu-toggle {
    display: none;
    position: fixed;
    top: 20px;
    left: 20px;
    width: 50px;
    height: 50px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    z-index: 1000;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

/* Utility Classes */
.hidden {
    display: none !important;
}

/* Responsive Design */
@media (max-width: 1200px) {
    .info-panel {
        width: 250px;
    }
}

@media (max-width: 1024px) {
    .info-panel {
        display: none;
    }
    
    .chat-list-panel {
        width: 300px;
    }
}

@media (max-width: 768px) {
    .app-container {
        margin: 5px;
        border-radius: 15px;
    }
    
    .sidebar {
        width: 60px;
        padding: 15px 0;
    }
    
    .nav-item {
        width: 40px;
        height: 40px;
        font-size: 16px;
    }
    
    .chat-list-panel {
        width: 280px;
    }
    
    .panel-header {
        padding: 20px;
    }
    
    .search-container {
        padding: 15px 20px;
    }
    
    .chat-header {
        padding: 15px 20px;
    }
    
    .chat-input-container {
        padding: 15px 20px;
    }
}

@media (max-width: 640px) {
    .mobile-menu-toggle {
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .app-container {
        margin: 0;
        border-radius: 0;
        height: 100vh;
    }
    
    .sidebar {
        position: fixed;
        left: -70px;
        top: 0;
        height: 100vh;
        z-index: 999;
        transition: left 0.3s ease;
        border-radius: 0;
    }
    
    .sidebar.mobile-open {
        left: 0;
    }
    
    .chat-list-panel {
        position: fixed;
        left: -350px;
        top: 0;
        height: 100vh;
        z-index: 998;
        transition: left 0.3s ease;
        border-radius: 0;
    }
    
    .chat-list-panel.mobile-open {
        left: 70px;
    }
    
    .chat-area {
        margin-left: 0;
        border-radius: 0;
    }
    
    .chat-header {
        padding-top: 80px;
    }
    
    .create-btn span {
        display: none;
    }
    
    .create-btn {
        padding: 10px;
        border-radius: 50%;
        width: 40px;
        height: 40px;
    }
}

@media (max-width: 480px) {
    .chat-user-info {
        gap: 10px;
    }
    
    .chat-user-details h3 {
        font-size: 16px;
    }
    
    .chat-actions {
        gap: 5px;
    }
    
    .action-btn {
        width: 35px;
        height: 35px;
        font-size: 14px;
    }
    
    .message-content {
        max-width: 85%;
        padding: 10px 14px;
    }
    
    .chat-input-container {
        gap: 10px;
    }
    
    .attachment-btn,
    .emoji-btn,
    .send-btn {
        width: 35px;
        height: 35px;
        font-size: 14px;
    }
}

/* Scrollbar Styles */
::-webkit-scrollbar {
    width: 6px;
}

::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.1);
    border-radius: 3px;
}

::-webkit-scrollbar-thumb {
    background: rgba(102, 126, 234, 0.3);
    border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgba(102, 126, 234, 0.5);
}</style>
<body>
    <div class="app-container">
        <!-- Left Sidebar Navigation -->
        <div class="sidebar">
            <div class="logo">
                <i class="fas fa-comments"></i>
            </div>
            <nav class="nav-menu">
                <button class="nav-item active" data-section="chat">
                    <i class="fas fa-comment-dots"></i>
                </button>
                <button class="nav-item" data-section="community">
                    <i class="fas fa-users"></i>
                </button>
                <button class="nav-item" data-section="profile">
                    <i class="fas fa-user"></i>
                </button>
                <button class="nav-item" data-section="search">
                    <i class="fas fa-search"></i>
                </button>
                <button class="nav-item" data-section="settings">
                    <i class="fas fa-cog"></i>
                </button>
            </nav>
        </div>

        <!-- Chat List Panel -->
        <div class="chat-list-panel">
            <div class="panel-header">
                <h2 id="panel-title">Chats</h2>
                <button class="create-btn" id="createNewBtn">
                    <i class="fas fa-plus"></i>
                    <span>Create New</span>
                </button>
            </div>

            <!-- Search Bar -->
            <div class="search-container">
                <input type="text" id="searchInput" placeholder="Search users..." class="search-input">
                <i class="fas fa-search search-icon"></i>
            </div>

            <!-- Chat List -->
            <div class="chat-list" id="chatList">
                <!-- Chat items will be populated by JavaScript -->
            </div>

            <!-- Community List (hidden by default) -->
            <div class="community-list hidden" id="communityList">
                <div class="community-item">
                    <div class="community-avatar">
                        <i class="fas fa-hashtag"></i>
                    </div>
                    <div class="community-info">
                        <h4>General Discussion</h4>
                        <p>245 members</p>
                    </div>
                </div>
                <div class="community-item">
                    <div class="community-avatar">
                        <i class="fas fa-code"></i>
                    </div>
                    <div class="community-info">
                        <h4>Developers Hub</h4>
                        <p>128 members</p>
                    </div>
                </div>
                <div class="community-item">
                    <div class="community-avatar">
                        <i class="fas fa-gamepad"></i>
                    </div>
                    <div class="community-info">
                        <h4>Gaming Zone</h4>
                        <p>89 members</p>
                    </div>
                </div>
            </div>

            <!-- Profile Section (hidden by default) -->
            <div class="profile-section hidden" id="profileSection">
                <div class="profile-card">
                    <div class="profile-avatar">
                        <img src="/placeholder.svg?height=80&width=80" alt="Profile" id="profileImage">
                    </div>
                    <div class="profile-info">
                        <div class="username-container">
                            <h3 id="displayUsername">John Doe</h3>
                            <button class="edit-btn" id="editUsernameBtn">
                                <i class="fas fa-edit"></i>
                            </button>
                        </div>
                        <input type="text" id="usernameInput" class="username-input hidden" value="John Doe">
                        <p class="user-status">Online</p>
                    </div>
                </div>
                <div class="profile-stats">
                    <div class="stat">
                        <span class="stat-number">24</span>
                        <span class="stat-label">Chats</span>
                    </div>
                    <div class="stat">
                        <span class="stat-number">156</span>
                        <span class="stat-label">Messages</span>
                    </div>
                    <div class="stat">
                        <span class="stat-number">8</span>
                        <span class="stat-label">Communities</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Chat Area -->
        <div class="chat-area">
            <div class="chat-header">
                <div class="chat-user-info">
                    <img src="/placeholder.svg?height=40&width=40" alt="User" class="chat-avatar" id="chatAvatar">
                    <div class="chat-user-details">
                        <h3 id="chatUsername">Select a chat</h3>
                        <p id="chatStatus">to start messaging</p>
                    </div>
                </div>
                <div class="chat-actions">
                    <button class="action-btn">
                        <i class="fas fa-phone"></i>
                    </button>
                    <button class="action-btn">
                        <i class="fas fa-video"></i>
                    </button>
                    <button class="action-btn">
                        <i class="fas fa-ellipsis-v"></i>
                    </button>
                </div>
            </div>

            <div class="chat-messages" id="chatMessages">
                <div class="welcome-message">
                    <i class="fas fa-comments"></i>
                    <h3>Welcome to ChatApp</h3>
                    <p>Select a chat from the sidebar to start messaging</p>
                </div>
            </div>

            <div class="chat-input-container">
                <button class="attachment-btn">
                    <i class="fas fa-paperclip"></i>
                </button>
                <input type="text" id="messageInput" placeholder="Type a message..." class="message-input">
                <button class="emoji-btn">
                    <i class="fas fa-smile"></i>
                </button>
                <button class="send-btn" id="sendBtn">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>

        <!-- Right Info Panel -->
        <div class="info-panel">
            <div class="info-header">
                <img src="/placeholder.svg?height=60&width=60" alt="User" class="info-avatar" id="infoAvatar">
                <div class="info-user-details">
                    <h3 id="infoUsername">User Name</h3>
                    <p id="infoUserRole">Member</p>
                </div>
            </div>

            <div class="info-sections">
                <div class="info-section">
                    <div class="section-header">
                        <i class="fas fa-star"></i>
                        <span>Starred Messages</span>
                        <i class="fas fa-chevron-down"></i>
                    </div>
                </div>

                <div class="info-section">
                    <div class="section-header">
                        <i class="fas fa-image"></i>
                        <span>Media (12)</span>
                        <i class="fas fa-chevron-down"></i>
                    </div>
                </div>

                <div class="info-section">
                    <div class="section-header">
                        <i class="fas fa-file"></i>
                        <span>Files & Docs (5)</span>
                        <i class="fas fa-chevron-down"></i>
                    </div>
                    <div class="file-list">
                        <div class="file-item">
                            <i class="fas fa-file-pdf"></i>
                            <span>Project_Brief.pdf</span>
                            <i class="fas fa-download"></i>
                        </div>
                        <div class="file-item">
                            <i class="fas fa-file-word"></i>
                            <span>Requirements.docx</span>
                            <i class="fas fa-download"></i>
                        </div>
                    </div>
                </div>

                <div class="info-section">
                    <div class="section-header">
                        <i class="fas fa-info-circle"></i>
                        <span>Information</span>
                        <i class="fas fa-chevron-down"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Mobile Menu Toggle -->
    <button class="mobile-menu-toggle" id="mobileMenuToggle">
        <i class="fas fa-bars"></i>
    </button>

    <script>
      // Sample data
const users = [
    {
        id: 1,
        name: "Sarah Johnson",
        avatar: "/placeholder.svg?height=45&width=45",
        status: "online",
        lastMessage: "Hey! How's the project going?",
        time: "2 min ago",
        unread: 2
    },
    {
        id: 2,
        name: "Mike Chen",
        avatar: "/placeholder.svg?height=45&width=45",
        status: "online",
        lastMessage: "The new design looks great!",
        time: "5 min ago",
        unread: 0
    },
    {
        id: 3,
        name: "Emma Wilson",
        avatar: "/placeholder.svg?height=45&width=45",
        status: "away",
        lastMessage: "Can we schedule a meeting?",
        time: "1 hour ago",
        unread: 1
    },
    {
        id: 4,
        name: "Alex Rodriguez",
        avatar: "/placeholder.svg?height=45&width=45",
        status: "offline",
        lastMessage: "Thanks for the update!",
        time: "3 hours ago",
        unread: 0
    },
    {
        id: 5,
        name: "Lisa Park",
        avatar: "/placeholder.svg?height=45&width=45",
        status: "online",
        lastMessage: "The report is ready for review",
        time: "5 hours ago",
        unread: 3
    }
];

const messages = {
    1: [
        {
            id: 1,
            sender: "Sarah Johnson",
            content: "Hey! How's the project going?",
            time: "10:30 AM",
            sent: false
        },
        {
            id: 2,
            sender: "You",
            content: "Going well! Just finished the UI mockups.",
            time: "10:32 AM",
            sent: true
        },
        {
            id: 3,
            sender: "Sarah Johnson",
            content: "That's awesome! Can't wait to see them.",
            time: "10:33 AM",
            sent: false
        }
    ],
    2: [
        {
            id: 1,
            sender: "Mike Chen",
            content: "The new design looks great!",
            time: "9:15 AM",
            sent: false
        },
        {
            id: 2,
            sender: "You",
            content: "Thanks! I spent a lot of time on the color scheme.",
            time: "9:20 AM",
            sent: true
        }
    ]
};

// DOM elements
const navItems = document.querySelectorAll('.nav-item');
const chatList = document.getElementById('chatList');
const communityList = document.getElementById('communityList');
const profileSection = document.getElementById('profileSection');
const panelTitle = document.getElementById('panel-title');
const searchInput = document.getElementById('searchInput');
const chatMessages = document.getElementById('chatMessages');
const messageInput = document.getElementById('messageInput');
const sendBtn = document.getElementById('sendBtn');
const chatUsername = document.getElementById('chatUsername');
const chatStatus = document.getElementById('chatStatus');
const chatAvatar = document.getElementById('chatAvatar');
const infoUsername = document.getElementById('infoUsername');
const infoAvatar = document.getElementById('infoAvatar');
const editUsernameBtn = document.getElementById('editUsernameBtn');
const displayUsername = document.getElementById('displayUsername');
const usernameInput = document.getElementById('usernameInput');
const mobileMenuToggle = document.getElementById('mobileMenuToggle');
const sidebar = document.querySelector('.sidebar');
const chatListPanel = document.querySelector('.chat-list-panel');

// State
let currentSection = 'chat';
let currentChatId = null;
let currentUsername = 'John Doe';

// Initialize app
document.addEventListener('DOMContentLoaded', function() {
    renderChatList();
    setupEventListeners();
});

// Event listeners
function setupEventListeners() {
    // Navigation
    navItems.forEach(item => {
        item.addEventListener('click', () => {
            const section = item.dataset.section;
            switchSection(section);
        });
    });

    // Search functionality
    searchInput.addEventListener('input', handleSearch);

    // Message sending
    sendBtn.addEventListener('click', sendMessage);
    messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    // Username editing
    editUsernameBtn.addEventListener('click', toggleUsernameEdit);
    usernameInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            saveUsername();
        }
    });
    usernameInput.addEventListener('blur', saveUsername);

    // Mobile menu
    mobileMenuToggle.addEventListener('click', toggleMobileMenu);

    // Close mobile menu when clicking outside
    document.addEventListener('click', (e) => {
        if (!sidebar.contains(e.target) && !chatListPanel.contains(e.target) && !mobileMenuToggle.contains(e.target)) {
            closeMobileMenu();
        }
    });
}

// Section switching
function switchSection(section) {
    currentSection = section;
    
    // Update nav active state
    navItems.forEach(item => {
        item.classList.toggle('active', item.dataset.section === section);
    });

    // Show/hide panels
    chatList.classList.toggle('hidden', section !== 'chat');
    communityList.classList.toggle('hidden', section !== 'community');
    profileSection.classList.toggle('hidden', section !== 'profile');

    // Update panel title
    const titles = {
        chat: 'Chats',
        community: 'Communities',
        profile: 'Profile',
        search: 'Search Users',
        settings: 'Settings'
    };
    panelTitle.textContent = titles[section] || 'ChatApp';

    // Handle search section
    if (section === 'search') {
        chatList.classList.remove('hidden');
        searchInput.focus();
    }
}

// Render chat list
function renderChatList() {
    chatList.innerHTML = users.map(user => `
        <div class="chat-item" data-user-id="${user.id}" onclick="selectChat(${user.id})">
            <div style="position: relative;">
                <img src="${user.avatar}" alt="${user.name}" class="chat-avatar">
                ${user.status === 'online' ? '<div class="online-indicator"></div>' : ''}
            </div>
            <div class="chat-info">
                <div class="chat-name">${user.name}</div>
                <div class="chat-preview">${user.lastMessage}</div>
            </div>
            <div class="chat-meta">
                <div class="chat-time">${user.time}</div>
                ${user.unread > 0 ? `<div class="unread-badge">${user.unread}</div>` : ''}
            </div>
        </div>
    `).join('');
}

// Search functionality
function handleSearch() {
    const query = searchInput.value.toLowerCase();
    const filteredUsers = users.filter(user => 
        user.name.toLowerCase().includes(query)
    );
    
    chatList.innerHTML = filteredUsers.map(user => `
        <div class="chat-item" data-user-id="${user.id}" onclick="selectChat(${user.id})">
            <div style="position: relative;">
                <img src="${user.avatar}" alt="${user.name}" class="chat-avatar">
                ${user.status === 'online' ? '<div class="online-indicator"></div>' : ''}
            </div>
            <div class="chat-info">
                <div class="chat-name">${user.name}</div>
                <div class="chat-preview">${user.lastMessage}</div>
            </div>
            <div class="chat-meta">
                <div class="chat-time">${user.time}</div>
                ${user.unread > 0 ? `<div class="unread-badge">${user.unread}</div>` : ''}
            </div>
        </div>
    `).join('');
}

// Select chat
function selectChat(userId) {
    currentChatId = userId;
    const user = users.find(u => u.id === userId);
    
    if (!user) return;

    // Update active chat item
    document.querySelectorAll('.chat-item').forEach(item => {
        item.classList.toggle('active', item.dataset.userId == userId);
    });

    // Update chat header
    chatUsername.textContent = user.name;
    chatStatus.textContent = user.status.charAt(0).toUpperCase() + user.status.slice(1);
    chatAvatar.src = user.avatar;

    // Update info panel
    infoUsername.textContent = user.name;
    infoAvatar.src = user.avatar;

    // Load messages
    loadMessages(userId);

    // Close mobile menu after selection
    closeMobileMenu();
}

// Load messages
function loadMessages(userId) {
    const userMessages = messages[userId] || [];
    
    if (userMessages.length === 0) {
        chatMessages.innerHTML = `
            <div class="welcome-message">
                <i class="fas fa-comments"></i>
                <h3>Start a conversation</h3>
                <p>Send a message to begin chatting with ${users.find(u => u.id === userId)?.name}</p>
            </div>
        `;
        return;
    }

    chatMessages.innerHTML = userMessages.map(message => `
        <div class="message ${message.sent ? 'sent' : 'received'}">
            ${!message.sent ? `<img src="${users.find(u => u.id === userId)?.avatar}" alt="User" class="message-avatar">` : ''}
            <div class="message-content">
                <div>${message.content}</div>
                <div class="message-time">${message.time}</div>
            </div>
        </div>
    `).join('');

    // Scroll to bottom
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Send message
function sendMessage() {
    const content = messageInput.value.trim();
    if (!content || !currentChatId) return;

    const now = new Date();
    const time = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

    // Add message to messages array
    if (!messages[currentChatId]) {
        messages[currentChatId] = [];
    }

    messages[currentChatId].push({
        id: Date.now(),
        sender: 'You',
        content: content,
        time: time,
        sent: true
    });

    // Update user's last message
    const user = users.find(u => u.id === currentChatId);
    if (user) {
        user.lastMessage = content;
        user.time = 'now';
    }

    // Clear input and reload messages
    messageInput.value = '';
    loadMessages(currentChatId);
    renderChatList();

    // Simulate response after 2 seconds
    setTimeout(() => {
        const responses = [
            "That sounds great!",
            "I agree with you.",
            "Thanks for letting me know.",
            "Interesting point!",
            "Let me think about that.",
            "Good idea!",
            "I'll get back to you on that."
        ];
        
        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
        
        messages[currentChatId].push({
            id: Date.now(),
            sender: user.name,
            content: randomResponse,
            time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
            sent: false
        });

        user.lastMessage = randomResponse;
        user.time = 'now';
        
        loadMessages(currentChatId);
        renderChatList();
    }, 2000);
}

// Username editing
function toggleUsernameEdit() {
    const isEditing = !usernameInput.classList.contains('hidden');
    
    if (isEditing) {
        saveUsername();
    } else {
        displayUsername.classList.add('hidden');
        usernameInput.classList.remove('hidden');
        usernameInput.focus();
        usernameInput.select();
    }
}

function saveUsername() {
    const newUsername = usernameInput.value.trim();
    if (newUsername && newUsername !== currentUsername) {
        currentUsername = newUsername;
        displayUsername.textContent = newUsername;
    }
    
    displayUsername.classList.remove('hidden');
    usernameInput.classList.add('hidden');
}

// Mobile menu
function toggleMobileMenu() {
    sidebar.classList.toggle('mobile-open');
    chatListPanel.classList.toggle('mobile-open');
}

function closeMobileMenu() {
    sidebar.classList.remove('mobile-open');
    chatListPanel.classList.remove('mobile-open');
}

// Add some sample interactions
document.addEventListener('DOMContentLoaded', function() {
    // Simulate online status changes
    setInterval(() => {
        users.forEach(user => {
            if (Math.random() < 0.1) { // 10% chance to change status
                const statuses = ['online', 'away', 'offline'];
                user.status = statuses[Math.floor(Math.random() * statuses.length)];
            }
        });
        
        if (currentSection === 'chat') {
            renderChatList();
        }
    }, 30000); // Every 30 seconds

    // Auto-select first chat on desktop
    if (window.innerWidth > 768 && users.length > 0) {
        setTimeout(() => selectChat(users[0].id), 500);
    }
});

// Handle window resize
window.addEventListener('resize', () => {
    if (window.innerWidth > 640) {
        closeMobileMenu();
    }
});
    </script>
</body>
</html>