<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Address Book</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    :root {
      --primary-color: #0070f3;
      --primary-hover: #0060df;
      --danger-color: #e11d48;
      --danger-hover: #be123c;
      --text-color: #111827;
      --text-muted: #6b7280;
      --border-color: #e5e7eb;
      --bg-color: #ffffff;
      --card-bg: #ffffff;
      --input-bg: #ffffff;
      --input-border: #d1d5db;
      --input-focus: #0070f3;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans",
        "Helvetica Neue", sans-serif;
      line-height: 1.5;
      color: var(--text-color);
      background-color: #f9fafb;
      padding-top: 200px;
    }

    .navbar-space {
      height: 180px;
      position: fixed;
      background-color: #f9fafb;
      top: 0;
      left: 0;
      right: 0;
      z-index: 1000;
    }

    .container {
      max-width: 800px;
      margin: 0 auto;
      padding: 2rem 1rem;
    }

    .card {
      background-color: var(--card-bg);
      border-radius: 0.5rem;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }

    .card-header {
      padding: 1.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .card-description {
      color: var(--text-muted);
      font-size: 0.875rem;
      margin-top: 0.25rem;
    }

    .card-content {
      padding: 1.5rem;
    }

    .address-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    h2 {
      font-size: 1.5rem;
      font-weight: 600;
    }

    .btn {
      padding: 0.625rem 1.25rem;
      border-radius: 0.375rem;
      font-weight: 500;
      font-size: 0.875rem;
      cursor: pointer;
      transition: background-color 0.2s, border-color 0.2s;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      border: none;
      text-decoration: none;
    }

    .btn-sm {
      padding: 0.375rem 0.75rem;
      font-size: 0.75rem;
    }

    .btn-primary {
      background-color: var(--primary-color);
      color: white;
    }

    .btn-primary:hover {
      background-color: var(--primary-hover);
    }

    .btn-outline {
      background-color: transparent;
      border: 1px solid var(--border-color);
      color: var(--text-color);
    }

    .btn-outline:hover {
      background-color: rgba(0, 0, 0, 0.05);
    }

    .btn-danger {
      background-color: var(--danger-color);
      color: white;
    }

    .btn-danger:hover {
      background-color: var(--danger-hover);
    }

    .addresses-container {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .address-card {
      border: 1px solid var(--border-color);
      border-radius: 0.5rem;
      padding: 1rem;
      position: relative;
    }

    .address-card.default {
      border-color: var(--primary-color);
    }

    .default-badge {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      background-color: var(--primary-color);
      color: white;
      font-size: 0.75rem;
      padding: 0.25rem 0.5rem;
      border-radius: 1rem;
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }

    .address-details {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    .address-field {
      margin-bottom: 0.5rem;
    }

    .address-field-label {
      font-size: 0.75rem;
      font-weight: 500;
      margin-bottom: 0.25rem;
    }

    .address-field-value {
      font-size: 0.875rem;
      color: var(--text-muted);
    }

    .address-actions {
      display: flex;
      justify-content: flex-end;
      gap: 0.5rem;
    }

    .text-center {
      text-align: center;
    }

    .text-muted-foreground {
      color: var(--text-muted);
    }

    .modal {
      display: flex;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      align-items: center;
      justify-content: center;
    }

    .modal-content {
      background-color: var(--bg-color);
      border-radius: 0.5rem;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      padding: 1.5rem;
      position: relative;
    }

    .close-modal {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      font-size: 1.5rem;
      cursor: pointer;
      color: var(--text-muted);
      text-decoration: none;
    }

    .modal-header {
      margin-bottom: 1rem;
    }

    .modal-body {
      margin-bottom: 1rem;
    }

    .modal-footer {
      display: flex;
      justify-content: flex-end;
      gap: 0.5rem;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    .form-group label {
      font-weight: 500;
      font-size: 0.875rem;
    }

    input[type="text"],
    input[type="email"] {
      padding: 0.625rem;
      border: 1px solid var(--input-border);
      border-radius: 0.375rem;
      font-size: 0.875rem;
      background-color: var(--input-bg);
      width: 100%;
    }

    input:focus {
      outline: none;
      border-color: var(--input-focus);
      box-shadow: 0 0 0 2px rgba(0, 112, 243, 0.2);
    }

    .error-message {
      color: var(--danger-color);
      font-size: 0.75rem;
      min-height: 1rem;
    }

    @media (max-width: 640px) {
      .address-details {
        grid-template-columns: 1fr;
      }

      .address-actions {
        flex-wrap: wrap;
      }
    }
  </style>
</head>
<body>
  <!-- Include navbar -->
  <div class="navbar-space">
    <%- include('partials/settingsNavbar') %>
  </div>

  <div class="container">
    <div class="card">
      <div class="card-header address-header">
        <div>
          <h2>Address Book</h2>
          <p class="card-description">Manage your shipping and billing addresses.</p>
        </div>
        <button class="btn btn-primary" id="add-address-btn">
          <i class="fas fa-plus"></i> Add New Address
        </button>
      </div>
      <div class="card-content">
        <div id="addresses-container" class="addresses-container">
          <% if (user.addresses && user.addresses.length > 0) { %>
            <% user.addresses.forEach(function(address) { %>
              <div class="address-card <%= address.isDefault ? 'default' : '' %>" data-id="<%= address._id %>">
                <% if (address.isDefault) { %>
                  <div class="default-badge">
                    <i class="fas fa-check"></i> Default
                  </div>
                <% } %>
                <div class="address-details">
                  <div class="address-field">
                    <div class="address-field-label">Street:</div>
                    <div class="address-field-value"><%= address.street || 'N/A' %></div>
                  </div>
                  <div class="address-field">
                    <div class="address-field-label">City:</div>
                    <div class="address-field-value"><%= address.city || 'N/A' %></div>
                  </div>
                  <div class="address-field">
                    <div class="address-field-label">State:</div>
                    <div class="address-field-value"><%= address.state || 'N/A' %></div>
                  </div>
                  <div class="address-field">
                    <div class="address-field-label">Postal Code:</div>
                    <div class="address-field-value"><%= address.postalCode || 'N/A' %></div>
                  </div>
                  <div class="address-field">
                    <div class="address-field-label">Country:</div>
                    <div class="address-field-value"><%= address.country || 'N/A' %></div>
                  </div>
                </div>
                <div class="address-actions">
                  <% if (!address.isDefault) { %>
                    <button class="btn btn-outline" data-action="set-default" data-id="<%= address._id %>">Set as Default</button>
                  <% } %>
                  <button class="btn btn-outline" data-action="edit" data-id="<%= address._id %>">
                    <i class="fas fa-pencil"></i> Edit
                  </button>
                  <button class="btn btn-danger" data-action="delete" data-id="<%= address._id %>">
                    <i class="fas fa-trash"></i> Delete
                  </button>
                </div>
              </div>
            <% }); %>
          <% } else { %>
            <div class="text-center py-6 text-muted-foreground">No addresses found. Add your first address.</div>
          <% } %>
          <%- include('partials/userPagination') %>
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Address Modal -->
  <% if (editModalData) { %>
    <div class="modal" id="edit-address-modal" style="display: flex;">
      <div class="modal-content">
        <a href="/settings" class="close-modal">Ã—</a>
        <h2 class="modal-header">Edit Address</h2>
        <form method="POST" action="/edit-address" id="edit-address-form">
          <input type="hidden" name="_method" value="PUT">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">
          <input type="hidden" name="addressId" value="<%= editModalData._id %>">
          <div class="form-group">
            <label for="edit-street">Street</label>
            <input type="text" name="street" id="edit-street" value="<%= editModalData.street || '' %>">
            <div class="error-message" id="edit-street-error"></div>
          </div>
          <div class="form-group">
            <label for="edit-city">City</label>
            <input type="text" name="city" id="edit-city" value="<%= editModalData.city || '' %>">
            <div class="error-message" id="edit-city-error"></div>
          </div>
          <div class="form-group">
            <label for="edit-state">State</label>
            <input type="text" name="state" id="edit-state" value="<%= editModalData.state || '' %>">
            <div class="error-message" id="edit-state-error"></div>
          </div>
          <div class="form-group">
            <label for="edit-postalCode">Postal Code</label>
            <input type="text" name="postalCode" id="edit-postalCode" value="<%= editModalData.postalCode || '' %>">
            <div class="error-message" id="edit-postalCode-error"></div>
          </div>
          <div class="form-group">
            <label for="edit-country">Country</label>
            <input type="text" name="country" id="edit-country" value="<%= editModalData.country || '' %>">
            <div class="error-message" id="edit-country-error"></div>
          </div>
          <div class="form-group">
            <label for="edit-isDefault">Set as Default</label>
            <input type="checkbox" name="isDefault" id="edit-isDefault" <%= editModalData.isDefault ? 'checked' : '' %>>
          </div>
          <div class="modal-footer">
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-outline" onclick="document.getElementById('edit-address-modal').style.display = 'none'">Cancel</button>
          </div>
        </form>
      </div>
    </div>
  <% } %>

  <!-- Add Address Modal -->
  <div class="modal" id="add-address-modal" style="display: none;">
    <div class="modal-content">
      <a href="#" class="close-modal">Ã—</a>
      <h2 class="modal-header">Add New Address</h2>
      <form method="POST" action="/add-address" id="add-address-form">
        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
        <div class="form-group">
          <label for="add-street">Street <span style="color: var(--danger-color);">*</span></label>
          <input type="text" name="street" id="add-street">
          <div class="error-message" id="add-street-error"></div>
        </div>
        <div class="form-group">
          <label for="add-city">City <span style="color: var(--danger-color);">*</span></label>
          <input type="text" name="city" id="add-city">
          <div class="error-message" id="add-city-error"></div>
        </div>
        <div class="form-group">
          <label for="add-state">State <span style="color: var(--danger-color);">*</span></label>
          <input type="text" name="state" id="add-state">
          <div class="error-message" id="add-state-error"></div>
        </div>
        <div class="form-group">
          <label for="add-postalCode">Postal Code <span style="color: var(--danger-color);">*</span></label>
          <input type="text" name="postalCode" id="add-postalCode">
          <div class="error-message" id="add-postalCode-error"></div>
        </div>
        <div class="form-group">
          <label for="add-country">Country <span style="color: var(--danger-color);">*</span></label>
          <input type="text" name="country" id="add-country">
          <div class="error-message" id="add-country-error"></div>
        </div>
        <div class="form-group">
          <label for="add-isDefault">Set as Default</label>
          <input type="checkbox" name="isDefault" id="add-isDefault">
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Add Address</button>
          <button type="button" class="btn btn-outline" onclick="document.getElementById('add-address-modal').style.display = 'none'">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      initApp();
    });

    function initApp() {
      setupEventListeners();
      const editModal = document.getElementById("edit-address-modal");
      if (editModal) {
        editModal.style.display = "flex";
      }
    }

    function sanitizeInput(input) {
      return input.replace(/[<>&'"]/g, '');
    }

    function validateAddressForm(form, prefix) {
      let isValid = true;
      const errors = {};
      const isAddForm = prefix === 'add';

      const street = sanitizeInput(form.querySelector(`#${prefix}-street`).value.trim());
      const city = sanitizeInput(form.querySelector(`#${prefix}-city`).value.trim());
      const state = sanitizeInput(form.querySelector(`#${prefix}-state`).value.trim());
      const postalCode = sanitizeInput(form.querySelector(`#${prefix}-postalCode`).value.trim());
      const country = sanitizeInput(form.querySelector(`#${prefix}-country`).value.trim());

      // Street validation
      if (isAddForm && !street) {
        errors.street = "Street is required.";
        isValid = false;
      } else if (street && street.length < 5) {
        errors.street = "Street must be at least 5 characters long.";
        isValid = false;
      } else if (street && !/^[a-zA-Z0-9\s,.]+$/.test(street)) {
        errors.street = "Street can only contain letters, numbers, spaces, commas, and periods.";
        isValid = false;
      }

      // City validation
      if (isAddForm && !city) {
        errors.city = "City is required.";
        isValid = false;
      } else if (city && city.length < 2) {
        errors.city = "City must be at least 2 characters long.";
        isValid = false;
      } else if (city && !/^[a-zA-Z\s]+$/.test(city)) {
        errors.city = "City can only contain letters and spaces.";
        isValid = false;
      }

      // State validation
      if (isAddForm && !state) {
        errors.state = "State is required.";
        isValid = false;
      } else if (state && state.length < 2) {
        errors.state = "State must be at least 2 characters long.";
        isValid = false;
      } else if (state && !/^[a-zA-Z\s]+$/.test(state)) {
        errors.state = "State can only contain letters and spaces.";
        isValid = false;
      }

      // Postal Code validation
      if (isAddForm && !postalCode) {
        errors.postalCode = "Postal code is required.";
        isValid = false;
      } else if (postalCode && !/^\d{3,10}$/.test(postalCode)) {
        errors.postalCode = "Postal code must be 3-10 digits.";
        isValid = false;
      }

      // Country validation
      if (isAddForm && !country) {
        errors.country = "Country is required.";
        isValid = false;
      } else if (country && country.length < 2) {
        errors.country = "Country must be at least 2 characters long.";
        isValid = false;
      } else if (country && !/^[a-zA-Z\s]+$/.test(country)) {
        errors.country = "Country can only contain letters and spaces.";
        isValid = false;
      }

      // Display error messages
      ['street', 'city', 'state', 'postalCode', 'country'].forEach(field => {
        const errorElement = document.getElementById(`${prefix}-${field}-error`);
        errorElement.textContent = errors[field] || '';
      });

      return isValid;
    }

    function setupEventListeners() {
      const addressActionButtons = document.querySelectorAll(".address-actions button");
      const addAddressBtn = document.getElementById("add-address-btn");

      if (addAddressBtn) {
        addAddressBtn.addEventListener("click", () => {
          const modal = document.getElementById("add-address-modal");
          modal.style.display = "flex";
          // Clear previous errors and inputs
          ['street', 'city', 'state', 'postalCode', 'country'].forEach(field => {
            document.getElementById(`add-${field}-error`).textContent = '';
            document.getElementById(`add-${field}`).value = '';
          });
          document.getElementById("add-isDefault").checked = false;
        });
      }

      addressActionButtons.forEach((button) => {
        button.addEventListener("click", handleAddressAction);
      });

      document.querySelectorAll(".close-modal").forEach((btn) => {
        btn.addEventListener("click", () => {
          const modal = btn.closest(".modal");
          if (modal) modal.style.display = "none";
        });
      });

      // Real-time validation for Add Address form
      const addAddressForm = document.getElementById('add-address-form');
      if (addAddressForm) {
        ['street', 'city', 'state', 'postalCode', 'country'].forEach(field => {
          const input = document.getElementById(`add-${field}`);
          input.addEventListener('input', () => {
            validateAddressForm(addAddressForm, 'add');
          });
        });

        addAddressForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          const form = e.target;

          if (!validateAddressForm(form, 'add')) {
            Swal.fire({
              icon: 'error',
              title: 'Invalid Input',
              text: 'Please fill all required fields correctly.',
              confirmButtonText: 'OK'
            });
            return;
          }

          const formData = new FormData(form);
          const data = Object.fromEntries(formData);
          data.isDefault = data.isDefault === 'on';
          const submitButton = form.querySelector('button[type="submit"]');
          submitButton.textContent = 'Adding...';
          submitButton.disabled = true;

          try {
            const response = await fetch('/add-address', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'CSRF-Token': form.querySelector('input[name="_csrf"]').value
              },
              body: JSON.stringify(data)
            });

            const result = await response.json();
            if (response.ok) {
              Swal.fire({
                icon: 'success',
                title: 'Success',
                text: result.message || 'Address added successfully.',
                confirmButtonText: 'OK'
              }).then(() => {
                window.location.href = '/address';
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message || 'Failed to add address.',
                confirmButtonText: 'OK'
              });
            }
          } catch (error) {
            console.error('Error adding address:', error);
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Failed to add address. Please try again.',
              confirmButtonText: 'OK'
            });
          } finally {
            submitButton.textContent = 'Add Address';
            submitButton.disabled = false;
          }
        });
      }

      // Real-time validation for Edit Address form
      const editAddressForm = document.getElementById('edit-address-form');
      if (editAddressForm) {
        ['street', 'city', 'state', 'postalCode', 'country'].forEach(field => {
          const input = document.getElementById(`edit-${field}`);
          if (input) {
            input.addEventListener('input', () => {
              validateAddressForm(editAddressForm, 'edit');
            });
          }
        });

        editAddressForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          const form = e.target;

          if (!validateAddressForm(form, 'edit')) {
            Swal.fire({
              icon: 'error',
              title: 'Invalid Input',
              text: 'Please correct the errors in the form.',
              confirmButtonText: 'OK'
            });
            return;
          }

          const formData = new FormData(form);
          const data = Object.fromEntries(formData);
          data.isDefault = data.isDefault === 'on';
          const submitButton = form.querySelector('button[type="submit"]');
          submitButton.textContent = 'Saving...';
          submitButton.disabled = true;

          try {
            const response = await fetch('/edit-address', {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
                'CSRF-Token': form.querySelector('input[name="_csrf"]').value
              },
              body: JSON.stringify(data)
            });

            const result = await response.json();
            if (response.ok) {
              Swal.fire({
                icon: 'success',
                title: 'Success',
                text: result.message || 'Address updated successfully.',
                confirmButtonText: 'OK'
              }).then(() => {
                window.location.href = '/address';
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message || 'Failed to update address.',
                confirmButtonText: 'OK'
              });
            }
          } catch (error) {
            console.error('Error updating address:', error);
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Failed to update address. Please try again.',
              confirmButtonText: 'OK'
            });
          } finally {
            submitButton.textContent = 'Save';
            submitButton.disabled = false;
          }
        });
      }
    }

    async function handleAddressAction(e) {
      const action = e.currentTarget.getAttribute("data-action");
      const id = e.currentTarget.getAttribute("data-id");

      switch (action) {
        case "edit":
          window.location.href = `/address?editAddressId=${id}`;
          break;
        case "delete":
          await deleteAddress(id);
          break;
        case "set-default":
          await setDefaultAddress(id);
          break;
      }
    }

    async function deleteAddress(id) {
      const result = await Swal.fire({
        icon: 'warning',
        title: 'Are you sure?',
        text: 'Do you want to delete this address?',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it',
        cancelButtonText: 'Cancel'
      });

      if (!result.isConfirmed) return;

      try {
        const response = await fetch(`/delete-address/${id}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'CSRF-Token': document.querySelector('input[name="_csrf"]').value
          }
        });
        if (response.status === 401) {
          Swal.fire({
            icon: 'error',
            title: 'Session Expired',
            text: 'Your session has expired. Please log in again.',
            confirmButtonText: 'OK'
          }).then(() => {
            window.location.href = '/logout';
          });
          return;
        }
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to delete address.');
        }
        Swal.fire({
          icon: 'success',
          title: 'Address Deleted',
          text: 'The address has been removed from your address book.',
          confirmButtonText: 'OK'
        }).then(() => {
          window.location.reload();
        });
      } catch (error) {
        console.error('Error deleting address:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message || 'Failed to delete address.',
          confirmButtonText: 'OK'
        });
      }
    }

    async function setDefaultAddress(id) {
      try {
        const response = await fetch(`/address-default/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'CSRF-Token': document.querySelector('input[name="_csrf"]').value
          }
        });
        if (response.status === 401) {
          Swal.fire({
            icon: 'error',
            title: 'Session Expired',
            text: 'Your session has expired. Please log in again.',
            confirmButtonText: 'OK'
          }).then(() => {
            window.location.href = '/logout';
          });
          return;
        }
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to set default address.');
        }
        Swal.fire({
          icon: 'success',
          title: 'Default Address Updated',
          text: 'Your default address has been updated.',
          confirmButtonText: 'OK'
        }).then(() => {
          window.location.reload();
        });
      } catch (error) {
        console.error('Error setting default address:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message || 'Failed to set default address.',
          confirmButtonText: 'OK'
        });
      }
    }
  </script>
</body>
</html>