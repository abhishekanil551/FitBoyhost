<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Library</title>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f5f5f5;
            padding: 70px;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        .container {
            width: 1200px;
            margin: 20px auto;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            flex: 1;
        }

        .header {
            padding: 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #e0e0e0;
        }

        .header h1 {
            font-size: 28px;
            font-weight: 600;
            color: #333;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .search-bar {
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 25px;
            width: 250px;
            font-size: 14px;
            outline: none;
        }

        .search-bar:focus {
            border-color: #007bff;
        }

        .add-game-btn {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 20px;
            background: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            color: #333;
            text-decoration: none;
            transition: background-color 0.2s;
        }

        .add-game-btn:hover {
            background: #e9ecef;
        }

        .add-icon {
            width: 16px;
            height: 16px;
            border: 2px solid #333;
            border-radius: 50%;
            position: relative;
        }

        .add-icon::before,
        .add-icon::after {
            content: '';
            position: absolute;
            background: #333;
        }

        .add-icon::before {
            width: 8px;
            height: 2px;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .add-icon::after {
            width: 2px;
            height: 8px;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        /* View Toggle Styles */
        .view-toggle {
            position: relative;
            display: flex;
            align-items: center;
        }

        .view-toggle-button {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 15px;
            background: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            color: #333;
            transition: background-color 0.2s;
        }

        .view-toggle-button:hover {
            background: #e9ecef;
        }

        .view-toggle-icon {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .view-toggle-dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            margin-top: 5px;
            background: white;
            border: 1px solid #ddd;
            border-radius: 6px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            min-width: 160px;
            z-index: 1000;
            display: none;
        }

        .view-toggle-dropdown.show {
            display: block;
        }

        .view-option {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px 16px;
            cursor: pointer;
            font-size: 14px;
            color: #333;
            transition: background-color 0.2s;
        }

        .view-option:hover {
            background: #f8f9fa;
        }

        .view-option.active {
            background: #e9ecef;
            font-weight: 500;
        }

        .view-option-icon {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 20px;
            height: 20px;
        }

        /* Games List and Grid Styles */
        .games-list {
            padding: 0;
        }

        .game-item {
            display: flex;
            align-items: center;
            padding: 20px 30px;
            border-bottom: 1px solid #e0e0e0;
            position: relative;
        }

        .game-item:last-child {
            border-bottom: none;
        }

        /* Grid View Styles */
        .games-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            padding: 30px;
        }

        .game-card {
            display: flex;
            flex-direction: column;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            overflow: hidden;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .game-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }

        .game-card-thumbnail {
            width: 100%;
            height: 120px;
            object-fit: cover;
        }

        .game-card-content {
            padding: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .game-card-title {
            font-size: 16px;
            font-weight: 500;
            color: #333;
        }

        .game-card-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .game-thumbnail {
            width: 60px;
            height: 60px;
            border-radius: 4px;
            object-fit: cover;
            margin-right: 20px;
        }

        .game-title {
            flex: 1;
            font-size: 16px;
            font-weight: 500;
            color: #333;
        }

        .download-btn {
            text-decoration: none;
            padding: 8px 20px;
            background: #6c5b47;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            margin-right: 20px;
            transition: background-color 0.2s;
        }

        .download-btn:hover {
            background: #5a4a38;
        }

        .menu-dots {
            cursor: pointer;
            padding: 10px;
            font-size: 18px;
            color: #666;
            position: relative;
            user-select: none;
        }

        .menu-dots:hover {
            color: #333;
        }

        .dropdown-menu {
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            min-width: 160px;
            z-index: 1000;
            display: none;
        }

        .dropdown-menu.show {
            display: block;
        }

        .dropdown-item {
            padding: 12px 16px;
            cursor: pointer;
            font-size: 14px;
            color: #dc3545;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            transition: background-color 0.2s;
        }

        .dropdown-item:hover {
            background: #f8f9fa;
        }

        .explore-more {
            text-align: center;
            padding: 40px;
        }

        .explore-btn {
            text-decoration: none;
            padding: 12px 30px;
            border: 1px solid #ddd;
            background: white;
            border-radius: 25px;
            cursor: pointer;
            font-size: 14px;
            color: #333;
            transition: all 0.2s;
        }

        .explore-btn:hover {
            background: #333;
            border-color: #bbb;
            color: #ffffff;
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
            display: none;
        }

        .overlay.show {
            display: block;
        }

        /* Hide appropriate view based on current selection */
        .games-list.hidden {
            display: none;
        }

        .games-grid.hidden {
            display: none;
        }

        /* Empty Library Message */
        .empty-library {
            text-align: center;
            padding: 60px 30px;
            color: #666;
            font-size: 16px;
        }

        .empty-library a {
            color: #007bff;
            text-decoration: none;
        }

        .empty-library a:hover {
            text-decoration: underline;
        }

        /* Link styles for game titles and thumbnails */
        .game-link {
            text-decoration: none;
            color: inherit;
            display: flex;
            align-items: center;
            flex: 1;
        }

        .game-link:hover .game-title,
        .game-link:hover .game-card-title {
            text-decoration: underline;
        }

        /* Footer spacing */
        footer {
            margin-top: 20px;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 1000;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            padding: 20px;
        }

        .modal.show {
            display: block;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-header h2 {
            font-size: 24px;
            color: #333;
        }

        .modal-close {
            cursor: pointer;
            font-size: 24px;
            color: #666;
            background: none;
            border: none;
            padding: 5px 10px;
        }

        .modal-close:hover {
            color: #333;
        }

        .modal .form-group {
            margin-bottom: 20px;
        }

        .modal label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
        }

        .modal input[type="text"],
        .modal textarea,
        .modal input[type="file"] {
            width: 100%;
            padding: 10px;
            border: 2px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
            color: #333;
            background-color: white;
        }

        .modal textarea {
            height: 120px;
            resize: vertical;
        }

        .modal input[type="file"] {
            padding: 8px;
        }

        .modal .error-message {
            color: #dc3545;
            font-size: 14px;
            margin-top: 5px;
            display: none;
        }

        .modal .submit-btn {
            background-color: #007bff;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            margin-top: 10px;
        }

        .modal .submit-btn:hover {
            background-color: #0056b3;
        }

        .modal .submit-btn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        .modal .video-preview {
            margin-top: 10px;
            display: none;
        }

        .modal .video-preview video {
            width: 100%;
            max-width: 400px;
            height: auto;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .modal .file-info {
            margin-top: 5px;
            font-size: 14px;
            color: #666;
        }

        .modal .required {
            color: #dc3545;
        }
    </style>
</head>
<body>
    <%- include('partials/header') %>

    <div class="container">
        <div class="header">
            <h1>Your Games</h1>
            <div class="header-right">
                <input type="text" class="search-bar" placeholder="Search your games...">
                
                <!-- View Toggle Dropdown -->
                <div class="view-toggle">
                    <button class="view-toggle-button" id="viewToggleBtn" onclick="toggleViewDropdown()">
                        <span class="view-toggle-icon" id="currentViewIcon">☰</span>
                        <span id="currentViewText">List</span>
                    </button>
                    <div class="view-toggle-dropdown" id="viewToggleDropdown">
                        <div class="view-option active" data-view="list" onclick="changeView('list')">
                            <span class="view-option-icon">☰</span>
                            <span>List</span>
                        </div>
                        <div class="view-option" data-view="grid" onclick="changeView('grid')">
                            <span class="view-option-icon">⊞</span>
                            <span>Grid</span>
                        </div>
                    </div>
                </div>
                
                <a href="/games" class="add-game-btn">
                    <div class="add-icon"></div>
                    Add game
                </a>
            </div>
        </div>

        <% if (error) { %>
            <div class="empty-library">
                <p><%= error %></p>
            </div>
        <% } else if (games.length === 0) { %>
            <div class="empty-library">
                <p>Your library is empty. <a href="/games">Explore games</a> to add some!</p>
            </div>
        <% } else { %>
            <!-- List View -->
            <div class="games-list" id="gamesListView">
                <% games.forEach(game => { %>
                    <div class="game-item" data-game-id="<%= game._id %>">
                        <a href="/product-details/<%= game._id %>" class="game-link">
                            <img src="<%= game.poster || '/placeholder.svg?height=60&width=60' %>" alt="<%= game.name %>" class="game-thumbnail">
                            <div class="game-title"><%= game.name %></div>
                        </a>
                        <a href="/download/<%= game._id %>" style="text-decoration: none;" class="download-btn" download>Download</a>
                        <div class="menu-dots" onclick="toggleDropdown(this)">⋮
                            <div class="dropdown-menu">
                                <button class="dropdown-item" onclick="showIssueModal('<%= game._id %>', '<%= game.name %>')">Having Issues?</button>
                            </div>
                        </div>
                    </div>
                <% }) %>
            </div>

            <!-- Grid View -->
            <div class="games-grid hidden" id="gamesGridView">
                <% games.forEach(game => { %>
                    <div class="game-card" data-game-id="<%= game._id %>">
                        <a href="/product-details/<%= game._id %>" class="game-link">
                            <img src="<%= game.poster || '/placeholder.svg?height=120&width=200' %>" alt="<%= game.name %>" class="game-card-thumbnail">
                        </a>
                        <div class="game-card-content">
                            <a href="/product-details/<%= game._id %>" class="game-link">
                                <div class="game-card-title"><%= game.name %></div>
                            </a>
                            <div class="game-card-actions">
                                <a href="/download/<%= game._id %>" class="download-btn">Download</a>
                                <div class="menu-dots" onclick="toggleDropdown(this)">⋮
                                    <div class="dropdown-menu">
                                        <button class="dropdown-item" onclick="showIssueModal('<%= game._id %>', '<%= game.name %>')">Having Issues?</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }) %>
            </div>
            <%- include('partials/userPagination') %>
        <% } %>

        <% if (games.length > 0) { %>
            <div class="explore-more">
                <a href="/games" class="explore-btn">Explore more</a>
            </div>
        <% } %>
    </div>

    <!-- Issue Report Modal -->
    <div class="modal" id="issueModal">
        <div class="modal-header">
            <h2 id="modalTitle">Report Your Issue</h2>
            <button class="modal-close" onclick="closeIssueModal()">×</button>
        </div>
        <form id="issueForm" novalidate>
            <div class="form-group">
                <label for="issueTitle">Issue Title <span class="required">*</span></label>
                <input type="text" id="issueTitle" name="issueTitle" required>
                <div class="error-message" id="titleError">Please enter an issue title</div>
            </div>

            <div class="form-group">
                <label for="description">Description <span class="required">*</span></label>
                <textarea id="description" name="description" placeholder="Please describe your issue in detail..." required></textarea>
                <div class="error-message" id="descriptionError">Please provide a detailed description of your issue</div>
            </div>

            <div class="form-group">
                <label for="videoUpload">Upload Verification Video <span class="required">*</span></label>
                <input type="file" id="videoUpload" name="videoUpload" accept="video/*" required>
                <div class="file-info">Please upload a video showing the issue for verification purposes (max 50MB)</div>
                <div class="error-message" id="videoError">Please upload a video file for verification</div>
                <div class="video-preview" id="videoPreview">
                    <video controls id="previewVideo"></video>
                </div>
            </div>

            <input type="hidden" id="videoUrl" name="videoUrl">
            <button type="submit" class="submit-btn" id="submitBtn">Submit Issue Report</button>
        </form>
    </div>
    <a href="/reportedIssues" style="text-align: end; color: #f70606;">Reported Issues?</a>
    <div class="overlay" id="modalOverlay" onclick="closeAllDropdowns(); closeIssueModal();"></div>

    <%- include('partials/footer') %>

    <script>
        // Cloudinary configuration
        const CLOUD_NAME = 'duxe6ofu7'; // Replace with your Cloudinary cloud name
        const UPLOAD_PRESET = 'fitboy_products'; // Replace with your upload preset name

        // Function to upload file to Cloudinary
        async function uploadToCloudinary(file, folder) {
            const formData = new FormData();
            formData.append('file', file);
            formData.append('upload_preset', UPLOAD_PRESET);
            formData.append('folder', `products/${folder}`);

            try {
                const response = await fetch(`https://api.cloudinary.com/v1_1/${CLOUD_NAME}/video/upload`, {
                    method: 'POST',
                    body: formData,
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                if (result.secure_url) {
                    return result.secure_url;
                } else {
                    throw new Error(result.error?.message || 'Upload failed');
                }
            } catch (error) {
                console.error('Cloudinary upload error:', error);
                throw error;
            }
        }

        // Toggle dropdown for game menu
        function toggleDropdown(element) {
            closeAllDropdowns();
            const dropdown = element.querySelector('.dropdown-menu');
            const overlay = document.getElementById('modalOverlay');
            dropdown.classList.toggle('show');
            overlay.classList.toggle('show', dropdown.classList.contains('show') || document.getElementById('issueModal').classList.contains('show'));
            event.stopPropagation();
        }

        // Toggle view dropdown
        function toggleViewDropdown() {
            closeAllDropdowns();
            const dropdown = document.getElementById('viewToggleDropdown');
            const overlay = document.getElementById('modalOverlay');
            dropdown.classList.toggle('show');
            overlay.classList.toggle('show', dropdown.classList.contains('show') || document.getElementById('issueModal').classList.contains('show'));
            event.stopPropagation();
        }

        // Change view between list and grid
        function changeView(viewType) {
            const listView = document.getElementById('gamesListView');
            const gridView = document.getElementById('gamesGridView');
            const currentViewIcon = document.getElementById('currentViewIcon');
            const currentViewText = document.getElementById('currentViewText');
            document.querySelectorAll('.view-option').forEach(option => {
                option.classList.toggle('active', option.dataset.view === viewType);
            });
            if (viewType === 'list') {
                currentViewIcon.textContent = '☰';
                currentViewText.textContent = 'List';
                listView.classList.remove('hidden');
                gridView.classList.add('hidden');
            } else {
                currentViewIcon.textContent = '⊞';
                currentViewText.textContent = 'Grid';
                gridView.classList.remove('hidden');
                listView.classList.add('hidden');
            }
            localStorage.setItem('preferredView', viewType);
            closeAllDropdowns();
        }

        // Show issue report modal
        function showIssueModal(gameId, gameName) {
            closeAllDropdowns();
            const modal = document.getElementById('issueModal');
            const modalTitle = document.getElementById('modalTitle');
            const overlay = document.getElementById('modalOverlay');
            modalTitle.textContent = `Report Issue for ${gameName}`;
            modal.dataset.gameId = gameId;
            modal.classList.add('show');
            overlay.classList.add('show');
            // Reset form
            const form = document.getElementById('issueForm');
            form.reset();
            document.getElementById('videoPreview').style.display = 'none';
            document.getElementById('previewVideo').src = '';
            document.getElementById('submitBtn').disabled = false;
            document.getElementById('submitBtn').textContent = 'Submit Issue Report';
            document.querySelectorAll('.error-message').forEach(error => error.style.display = 'none');
            document.getElementById('videoUrl').value = '';
        }

        // Close issue report modal
        function closeIssueModal() {
            const modal = document.getElementById('issueModal');
            const overlay = document.getElementById('modalOverlay');
            modal.classList.remove('show');
            overlay.classList.remove('show');
        }

        function closeAllDropdowns() {
            document.querySelectorAll('.dropdown-menu, .view-toggle-dropdown').forEach(dropdown => {
                dropdown.classList.remove('show');
            });
        }

        function removeGame(button, gameId) {
            const gameElement = button.closest('.game-item') || button.closest('.game-card');
            const gameName = gameElement.querySelector('.game-title, .game-card-title').textContent;
            
            Swal.fire({
                title: `Remove "${gameName}"?`,
                text: `Are you sure you want to remove "${gameName}" from your library?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Remove',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/library/remove', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ gameId })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            gameElement.style.transition = 'opacity 0.3s ease';
                            gameElement.style.opacity = '0';
                            setTimeout(() => {
                                gameElement.remove();
                                if (document.querySelectorAll('.game-item, .game-card').length === 0) {
                                    window.location.reload();
                                }
                            }, 300);
                            Swal.fire({
                                icon: 'success',
                                title: 'Removed',
                                text: `"${gameName}" has been removed from your library.`,
                                showConfirmButton: false,
                                timer: 1500
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || 'Failed to remove game.'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error removing game:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while removing the game.'
                        });
                    });
                }
            });
            closeAllDropdowns();
        }

        document.addEventListener('click', function(event) {
            if (!event.target.closest('.menu-dots') &&
                !event.target.closest('.view-toggle-button') &&
                !event.target.closest('.modal') &&
                !event.target.closest('.dropdown-item')) {
                closeAllDropdowns();
                closeIssueModal();
            }
        });

        document.querySelector('.search-bar').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            document.querySelectorAll('.game-item').forEach(item => {
                const gameTitle = item.querySelector('.game-title').textContent.toLowerCase();
                item.style.display = gameTitle.includes(searchTerm) ? 'flex' : 'none';
            });
            document.querySelectorAll('.game-card').forEach(card => {
                const gameTitle = card.querySelector('.game-card-title').textContent.toLowerCase();
                card.style.display = gameTitle.includes(searchTerm) ? 'flex' : 'none';
            });
        });

        // Issue Form Handling
        document.addEventListener('DOMContentLoaded', function() {
            const preferredView = localStorage.getItem('preferredView') || 'list';
            changeView(preferredView);

            const form = document.getElementById('issueForm');
            const titleInput = document.getElementById('issueTitle');
            const descriptionInput = document.getElementById('description');
            const videoInput = document.getElementById('videoUpload');
            const submitBtn = document.getElementById('submitBtn');
            const titleError = document.getElementById('titleError');
            const descriptionError = document.getElementById('descriptionError');
            const videoError = document.getElementById('videoError');
            const videoPreview = document.getElementById('videoPreview');
            const previewVideo = document.getElementById('previewVideo');
            const videoUrlInput = document.getElementById('videoUrl');

            // Validation functions
            function validateTitle() {
                const title = titleInput.value.trim();
                if (title.length === 0) {
                    showError(titleError, 'Please enter an issue title');
                    return false;
                } else if (title.length < 5) {
                    showError(titleError, 'Title must be at least 5 characters long');
                    return false;
                } else {
                    hideError(titleError);
                    return true;
                }
            }

            function validateDescription() {
                const description = descriptionInput.value.trim();
                if (description.length === 0) {
                    showError(descriptionError, 'Please provide a detailed description of your issue');
                    return false;
                } else if (description.length < 20) {
                    showError(descriptionError, 'Description must be at least 20 characters long');
                    return false;
                } else {
                    hideError(descriptionError);
                    return true;
                }
            }

            function validateVideo() {
                const videoUrl = videoUrlInput.value.trim();
                if (!videoUrl) {
                    showError(videoError, 'Please upload a video file for verification');
                    return false;
                }
                hideError(videoError);
                return true;
            }

            function showError(errorElement, message) {
                errorElement.textContent = message;
                errorElement.style.display = 'block';
            }

            function hideError(errorElement) {
                errorElement.style.display = 'none';
            }

            // Video upload handling
            videoInput.addEventListener('change', async function() {
                const file = this.files[0];
                if (file) {
                    // Check file type
                    if (!file.type.startsWith('video/')) {
                        showError(videoError, 'Please upload a valid video file');
                        videoPreview.style.display = 'none';
                        previewVideo.src = '';
                        videoUrlInput.value = '';
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid File',
                            text: 'Please upload a valid video file.'
                        });
                        return;
                    }

                    // Check file size (max 50MB)
                    const maxSize = 50 * 1024 * 1024; // 50MB in bytes
                    if (file.size > maxSize) {
                        showError(videoError, 'Video file size must be less than 50MB');
                        videoPreview.style.display = 'none';
                        previewVideo.src = '';
                        videoUrlInput.value = '';
                        Swal.fire({
                            icon: 'error',
                            title: 'File Too Large',
                            text: 'Video file size must be less than 50MB.'
                        });
                        return;
                    }

                    // Show loading state
                    showError(videoError, 'Uploading video...');
                    submitBtn.disabled = true;
                    submitBtn.textContent = 'Uploading...';

                    try {
                        // Upload to Cloudinary
                        const url = await uploadToCloudinary(file, 'issue_videos');
                        videoUrlInput.value = url;

                        // Show video preview
                        const urlObject = URL.createObjectURL(file);
                        previewVideo.src = urlObject;
                        videoPreview.style.display = 'block';
                        previewVideo.addEventListener('loadeddata', function() {
                            URL.revokeObjectURL(urlObject);
                        });

                        hideError(videoError);
                        submitBtn.disabled = false;
                        submitBtn.textContent = 'Submit Issue Report';
                        Swal.fire({
                            icon: 'success',
                            title: 'Video Uploaded',
                            text: 'Video successfully uploaded. You can now submit the issue report.',
                            showConfirmButton: false,
                            timer: 1500
                        });
                    } catch (error) {
                        showError(videoError, 'Failed to upload video: ' + error.message);
                        videoPreview.style.display = 'none';
                        previewVideo.src = '';
                        videoUrlInput.value = '';
                        submitBtn.disabled = false;
                        submitBtn.textContent = 'Submit Issue Report';
                        Swal.fire({
                            icon: 'error',
                            title: 'Upload Failed',
                            text: 'Failed to upload video: ' + error.message
                        });
                    }
                } else {
                    videoPreview.style.display = 'none';
                    previewVideo.src = '';
                    videoUrlInput.value = '';
                    showError(videoError, 'Please upload a video file for verification');
                }
            });

            // Real-time validation
            titleInput.addEventListener('blur', validateTitle);
            titleInput.addEventListener('input', function() {
                if (titleInput.value.trim().length > 0) {
                    validateTitle();
                }
            });

            descriptionInput.addEventListener('blur', validateDescription);
            descriptionInput.addEventListener('input', function() {
                if (descriptionInput.value.trim().length > 0) {
                    validateDescription();
                }
            });

            // Form submission
            form.addEventListener('submit', async function(e) {
                e.preventDefault();

                const isTitleValid = validateTitle();
                const isDescriptionValid = validateDescription();
                const isVideoValid = validateVideo();

                if (isTitleValid && isDescriptionValid && isVideoValid) {
                    submitBtn.disabled = true;
                    submitBtn.textContent = 'Submitting...';

                    const gameId = document.getElementById('issueModal').dataset.gameId;
                    const formData = {
                        issueTitle: titleInput.value.trim(),
                        description: descriptionInput.value.trim(),
                        videoUpload: videoUrlInput.value
                    };

                    try {
                        const response = await fetch(`/havingIssues/${gameId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(formData)
                        });

                        const data = await response.json();
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Issue Reported',
                                text: 'Issue report submitted successfully! We will review your case and get back to you soon.',
                                showConfirmButton: false,
                                timer: 2000
                            }).then(() => {
                                form.reset();
                                videoPreview.style.display = 'none';
                                previewVideo.src = '';
                                videoUrlInput.value = '';
                                closeIssueModal();
                                submitBtn.disabled = false;
                                submitBtn.textContent = 'Submit Issue Report';
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || 'Failed to submit issue report.'
                            });
                            submitBtn.disabled = false;
                            submitBtn.textContent = 'Submit Issue Report';
                        }
                    } catch (error) {
                        console.error('Error submitting issue report:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while submitting the issue report.'
                        });
                        submitBtn.disabled = false;
                        submitBtn.textContent = 'Submit Issue Report';
                    }
                } else {
                    const firstError = document.querySelector('.modal .error-message[style*="block"]');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: 'Please correct the errors in the form before submitting.'
                    });
                }
            });
        });
    </script>
</body>
</html>